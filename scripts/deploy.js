const hre = require("hardhat");

async function main() {
  console.log("üè¢ D√©ploiement du contrat RealEstateToken...");
  
  // Param√®tres de la propri√©t√© (FICTIVE POUR D√âMONSTRATION)
  const propertyData = {
    propertyAddress: "456 Rue de la Tokenisation, 75000 DemoVille, France [FICTIF]",
    propertyType: "Bureau Commercial - Propri√©t√© de D√©monstration",
    totalValue: hre.ethers.parseEther("5000000"), // 5M EUR
    tokenizedPercentage: 80, // 80% tokenis√©
    legalDocumentHash: "demo_legal_hash_001", // Hash de d√©monstration
    valuationReportHash: "demo_valuation_hash_001", // Hash de d√©monstration
    isVerified: false,
    lastValuationDate: 0
  };
  
  // R√©cup√©rer les signers
  const signers = await hre.ethers.getSigners();
  const deployer = signers[0];
  
  // Utiliser le m√™me compte comme property manager pour simplifier
  const propertyManager = deployer;
  
  console.log("üìã Param√®tres de d√©ploiement:");
  console.log("- Deployer:", deployer.address);
  console.log("- Property Manager:", propertyManager.address);
  console.log("- Propri√©t√©:", propertyData.propertyAddress);
  console.log("- Valeur totale:", hre.ethers.formatEther(propertyData.totalValue), "EUR");
  console.log("- Pourcentage tokenis√©:", propertyData.tokenizedPercentage + "%");
  
  // V√©rifier le solde du deployer
  const balance = await hre.ethers.provider.getBalance(deployer.address);
  console.log("- Solde deployer:", hre.ethers.formatEther(balance), "ETH");
  
  if (balance < hre.ethers.parseEther("0.01")) {
    console.log("‚ö†Ô∏è Attention: Solde faible, le d√©ploiement pourrait √©chouer");
  }
  
  // D√©ploiement
  console.log("\nüöÄ D√©ploiement en cours...");
  const RealEstateToken = await hre.ethers.getContractFactory("RealEstateToken");
  const realEstateToken = await RealEstateToken.deploy(
    "DemoVille Office Token",       // nom
    "DVOT",                         // symbole  
    hre.ethers.parseEther("4000000"), // 4M tokens
    propertyData,                   // m√©tadonn√©es
    propertyManager.address         // gestionnaire
  );

  console.log("‚è≥ Attente de la confirmation de d√©ploiement...");
  await realEstateToken.waitForDeployment();
  
  const contractAddress = await realEstateToken.getAddress();
  
  console.log("\n‚úÖ RealEstateToken d√©ploy√© avec succ√®s !");
  console.log("üìù Adresse du contrat:", contractAddress);
  console.log("üîó Voir sur Etherscan:", `https://sepolia.etherscan.io/address/${contractAddress}`);
  
  // V√©rifications post-d√©ploiement
  console.log("\nüîç V√©rifications:");
  try {
    console.log("- Nom:", await realEstateToken.name());
    console.log("- Symbole:", await realEstateToken.symbol());
    console.log("- Supply total:", hre.ethers.formatEther(await realEstateToken.totalSupply()));
    console.log("- Valeur par token:", hre.ethers.formatEther(await realEstateToken.getTokenValue()), "EUR");
    
    const property = await realEstateToken.getPropertyMetadata();
    console.log("- Propri√©t√© v√©rifi√©e:", property.isVerified);
    console.log("- Valeur totale:", hre.ethers.formatEther(property.totalValue), "EUR");
  } catch (error) {
    console.log("‚ö†Ô∏è Erreur lors des v√©rifications:", error.message);
  }
  
  // V√©rification Etherscan (seulement si on a une API key)
  if (process.env.ETHERSCAN_API_KEY && process.env.ETHERSCAN_API_KEY !== "your_etherscan_api_key_here") {
    console.log("\n‚è≥ Attente de 6 confirmations pour la v√©rification Etherscan...");
    await realEstateToken.deploymentTransaction().wait(6);
    
    try {
      await hre.run("verify:verify", {
        address: contractAddress,
        constructorArguments: [
          "DemoVille Office Token",
          "DVOT",
          hre.ethers.parseEther("4000000"),
          propertyData,
          propertyManager.address
        ],
      });
      console.log("‚úÖ Contrat v√©rifi√© sur Etherscan");
    } catch (error) {
      console.log("‚ö†Ô∏è Erreur de v√©rification Etherscan:", error.message);
      console.log("   Vous pouvez v√©rifier manuellement sur https://sepolia.etherscan.io");
    }
  } else {
    console.log("\nüí° Pour v√©rifier automatiquement sur Etherscan, ajoutez ETHERSCAN_API_KEY dans .env");
  }
  
  console.log("\nüéâ D√©ploiement termin√© avec succ√®s!");
  console.log("üìù Adresse du contrat:", contractAddress);
  console.log("üîó Explorer:", `https://sepolia.etherscan.io/address/${contractAddress}`);
  
  // Co√ªt du d√©ploiement
  const newBalance = await hre.ethers.provider.getBalance(deployer.address);
  const deploymentCost = balance - newBalance;
  console.log("üí∞ Co√ªt du d√©ploiement:", hre.ethers.formatEther(deploymentCost), "ETH");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Erreur de d√©ploiement:", error);
    process.exit(1);
  });