// Configuration
const CONTRACT_ADDRESS = "0x4f8149CfC88d277c6e740Cb3Bb2CFed03281D619";
const SEPOLIA_CHAIN_ID = "0xaa36a7"; // 11155111 en hex

// ABI du contrat (simplifi√©)
const CONTRACT_ABI = [
    // Read functions
    "function name() view returns (string)",
    "function symbol() view returns (string)", 
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address) view returns (uint256)",
    "function getTokenValue() view returns (uint256)",
    "function getPropertyMetadata() view returns (tuple(string propertyAddress, string propertyType, uint256 totalValue, uint256 tokenizedPercentage, string legalDocumentHash, string valuationReportHash, bool isVerified, uint256 lastValuationDate))",
    "function qualifiedInvestors(address) view returns (bool)",
    "function blacklisted(address) view returns (bool)",
    "function owner() view returns (address)",
    "function propertyManager() view returns (address)",
    "function totalRevenueCollected() view returns (uint256)",
    "function totalRevenueDistributed() view returns (uint256)",
    
    // Write functions
    "function qualifyInvestor(address investor)",
    "function disqualifyInvestor(address investor)",
    "function transfer(address to, uint256 amount) returns (bool)",
    "function updatePropertyValuation(uint256 newValue, string valuationHash)",
    "function verifyProperty(string documentHash)",
    "function collectRevenue(uint256 amount)",
    "function distributeDividends() payable",
    "function pause()",
    "function unpause()",
    "function blacklistAddress(address account)",
    "function whitelistAddress(address account)",
    
    // Events
    "event PropertyVerified(address indexed verifier, string documentHash)",
    "event PropertyUpdated(string newValuationHash, uint256 newValue)",
    "event InvestorQualified(address indexed investor)",
    "event RevenueCollected(uint256 amount)",
    "event DividendsDistributed(uint256 totalAmount, uint256 perToken)"
];

// Variables globales
let provider = null;
let signer = null;
let contract = null;
let userAddress = null;

// D√©finir les fonctions globales AVANT DOMContentLoaded
console.log('üì• Chargement du script app.js...');

// Fonction globale de calcul
window.manuallyCalculateTokenValue = async function() {
    console.log('üî• Fonction manuallyCalculateTokenValue appel√©e (globale)');
    
    if (!window.contract) {
        console.log('‚ùå Contract non disponible');
        alert('‚ùå Connectez-vous d\'abord');
        return;
    }

    console.log('‚úÖ Contract disponible, d√©but du calcul');

    try {
        console.log('üßÆ Calcul de la valeur du token...');
        
        const [property, totalSupply, tokenValue] = await Promise.all([
            window.contract.getPropertyMetadata(),
            window.contract.totalSupply(),
            window.contract.getTokenValue()
        ]);

        const propertyValueEur = parseFloat(ethers.utils.formatEther(property.totalValue));
        const totalSupplyNum = parseFloat(ethers.utils.formatEther(totalSupply));
        const tokenizedPercentage = property.tokenizedPercentage;
        
        console.log('üîç DONN√âES POUR CALCUL:');
        console.log('- Valeur propri√©t√©:', propertyValueEur, 'EUR');
        console.log('- % tokenis√©:', tokenizedPercentage, '%');
        console.log('- Supply total:', totalSupplyNum, 'tokens');
        
        if (propertyValueEur > 0 && totalSupplyNum > 0 && tokenizedPercentage > 0) {
            const tokenizedValue = (propertyValueEur * tokenizedPercentage) / 100;
            const calculatedTokenValue = tokenizedValue / totalSupplyNum;
            
            // Mettre √† jour l'affichage
            const tokenValueElement = document.getElementById('tokenValue');
            if (tokenValueElement) {
                tokenValueElement.textContent = '‚Ç¨' + calculatedTokenValue.toFixed(6);
            }
            
            console.log(`‚úÖ Valeur calcul√©e: ‚Ç¨${calculatedTokenValue.toFixed(6)} par token`);
            alert(`‚úÖ Valeur calcul√©e: ‚Ç¨${calculatedTokenValue.toFixed(6)} par token`);
            
        } else {
            console.log('‚ùå Impossible de calculer: donn√©es insuffisantes');
            alert('‚ùå Impossible de calculer: donn√©es insuffisantes');
        }

    } catch (error) {
        console.error('Erreur calcul:', error);
        alert('‚ùå Erreur: ' + error.message);
    }
};

// Fonction de test
window.testCalculateValue = function() {
    console.log('üß™ Test function called');
    window.manuallyCalculateTokenValue();
};

// Fonction pour attacher le bouton
window.attachCalculateButton = function() {
    const btn = document.getElementById('calculateTokenValueBtn');
    if (btn) {
        btn.onclick = window.manuallyCalculateTokenValue;
        console.log('‚úÖ Event listener attach√© manuellement');
        alert('‚úÖ Bouton connect√©!');
        return true;
    } else {
        console.log('‚ùå Bouton non trouv√©');
        alert('‚ùå Bouton non trouv√©');
        return false;
    }
};

console.log('‚úÖ Fonctions globales d√©finies');

// Initialisation
document.addEventListener('DOMContentLoaded', async function() {
    console.log('üöÄ Interface RWA Token charg√©e');
    
    // V√©rifier si ethers est charg√©
    if (typeof ethers === 'undefined') {
        console.error('‚ùå Ethers.js non charg√©');
        showMessage('‚ùå Erreur: Ethers.js non charg√©. V√©rifiez votre connexion internet.', 'error');
        return;
    }
    
    // V√©rifier si MetaMask est install√©
    if (typeof window.ethereum !== 'undefined') {
        console.log('‚úÖ MetaMask d√©tect√©');
        try {
            provider = new ethers.providers.Web3Provider(window.ethereum);
            
            // V√©rifier si d√©j√† connect√©
            const accounts = await provider.listAccounts();
            if (accounts.length > 0) {
                await connectWallet();
            }
        } catch (error) {
            console.error('Erreur initialisation provider:', error);
            showMessage('‚ùå Erreur d\'initialisation du provider', 'error');
        }
    } else {
        console.log('‚ùå MetaMask non d√©tect√©');
        showMessage('‚ùå MetaMask non d√©tect√©. Veuillez installer MetaMask.', 'error');
    }
    
    // Event listeners
    document.getElementById('connectWallet').addEventListener('click', connectWallet);
    document.getElementById('qualifyBtn').addEventListener('click', qualifyInvestor);
    document.getElementById('transferBtn').addEventListener('click', transferTokens);
    document.getElementById('updateValuationBtn').addEventListener('click', updateValuation);
    document.getElementById('verifyPropertyBtn').addEventListener('click', verifyProperty);
    document.getElementById('collectRevenueBtn').addEventListener('click', collectRevenue);
    document.getElementById('distributeDividendsBtn').addEventListener('click', distributeDividends);
    // V√©rification et ajout de l'event listener pour autoDistributeBtn
    const autoDistributeBtn = document.getElementById('autoDistributeBtn');
    if (autoDistributeBtn) {
        autoDistributeBtn.addEventListener('click', autoDistributeDividends);
        console.log('‚úÖ Event listener ajout√© pour autoDistributeBtn');
    } else {
        console.log('‚ùå autoDistributeBtn non trouv√© dans le DOM');
    }
    document.getElementById('showManualBtn').addEventListener('click', toggleManualDistribution);
    // Ajouter l'event listener avec un d√©lai pour s'assurer que le DOM est pr√™t
    setTimeout(() => {
        const calculateBtn = document.getElementById('calculateTokenValueBtn');
        if (calculateBtn) {
            calculateBtn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('üî• Bouton cliqu√© via event listener');
                manuallyCalculateTokenValue();
            });
            console.log('‚úÖ Event listener ajout√© au bouton calculer valeur');
            
            // Test direct
            calculateBtn.onclick = function() {
                console.log('üî• Bouton cliqu√© via onclick');
                manuallyCalculateTokenValue();
            };
        } else {
            console.log('‚ùå Bouton calculateTokenValueBtn non trouv√©');
        }
    }, 100);
    document.getElementById('pauseBtn').addEventListener('click', pauseContract);
    document.getElementById('unpauseBtn').addEventListener('click', unpauseContract);
});

// Connexion au wallet
async function connectWallet() {
    try {
        if (!window.ethereum) {
            throw new Error('MetaMask non d√©tect√©');
        }
        
        // Demander la connexion
        await window.ethereum.request({ method: 'eth_requestAccounts' });
        
        // V√©rifier le r√©seau
        const chainId = await window.ethereum.request({ method: 'eth_chainId' });
        if (chainId !== SEPOLIA_CHAIN_ID) {
            try {
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: SEPOLIA_CHAIN_ID }],
                });
            } catch (switchError) {
                if (switchError.code === 4902) {
                    showMessage('‚ùå Veuillez ajouter le r√©seau Sepolia √† MetaMask', 'error');
                    return;
                }
                throw switchError;
            }
        }
        
        // Initialiser provider et signer
        provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        userAddress = await signer.getAddress();
        
        // Initialiser le contrat
        contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
        window.contract = contract; // Exposer globalement
        window.userAddress = userAddress; // Exposer l'adresse globalement
        
        // Mettre √† jour l'UI
        document.getElementById('connectWallet').style.display = 'none';
        document.getElementById('walletInfo').classList.remove('hidden');
        document.getElementById('walletAddress').textContent = userAddress;
        
        // Afficher la status bar et mettre √† jour les indicateurs
        if (typeof statusBar !== 'undefined') {
            statusBar.show();
            statusBar.updateNetwork(true, 'Sepolia Testnet');
        }
        
        // Notification moderne
        if (typeof notifications !== 'undefined') {
            notifications.success('Connexion r√©ussie', `Wallet connect√© sur Sepolia: ${userAddress.slice(0, 6)}...${userAddress.slice(-4)}`);
        } else {
            showMessage('‚úÖ Wallet connect√© avec succ√®s!', 'success');
        }
        
        // Charger les donn√©es
        await loadContractData();
        
        // Attacher le bouton calculer valeur
        window.attachCalculateButton();
        
    } catch (error) {
        console.error('Erreur de connexion:', error);
        showMessage(`‚ùå Erreur de connexion: ${error.message}`, 'error');
    }
}

// Charger les donn√©es du contrat
async function loadContractData() {
    if (!contract) return;
    
    try {
        console.log('üìä Chargement des donn√©es du contrat...');
        
        // Informations du token et m√©tadonn√©es de la propri√©t√©
        const [name, symbol, totalSupply, tokenValue, myBalance, property] = await Promise.all([
            contract.name(),
            contract.symbol(),
            contract.totalSupply(),
            contract.getTokenValue(),
            contract.balanceOf(userAddress),
            contract.getPropertyMetadata()
        ]);
        
        document.getElementById('tokenName').textContent = name;
        document.getElementById('tokenSymbol').textContent = symbol;
        document.getElementById('totalSupply').textContent = formatEther(totalSupply);
        
        // Calculer la valeur du token si elle est √† 0
        let tokenValueEth = parseFloat(ethers.utils.formatEther(tokenValue));
        
        // Si la valeur du token est 0, calculer automatiquement
        if (tokenValueEth === 0) {
            console.log('üîç Valeur token = 0, calcul automatique...');
            
            const propertyValueEth = parseFloat(ethers.utils.formatEther(property.totalValue));
            const totalSupplyNum = parseFloat(ethers.utils.formatEther(totalSupply));
            
            console.log('üìä Donn√©es pour calcul:');
            console.log('- Valeur propri√©t√©:', propertyValueEth, 'EUR');
            console.log('- % tokenis√©:', property.tokenizedPercentage, '%');
            console.log('- Supply total:', totalSupplyNum, 'tokens');
            
            if (propertyValueEth > 0 && property.tokenizedPercentage > 0 && totalSupplyNum > 0) {
                const tokenizedValue = (propertyValueEth * property.tokenizedPercentage) / 100;
                tokenValueEth = tokenizedValue / totalSupplyNum;
                
                console.log('üí° Valeur calcul√©e:', tokenValueEth, 'EUR par token');
                showMessage(`üí° Valeur calcul√©e automatiquement: ‚Ç¨${tokenValueEth.toFixed(6)} par token`, 'info');
            } else {
                console.log('‚ùå Impossible de calculer la valeur: donn√©es insuffisantes');
                showMessage('‚ö†Ô∏è Impossible de calculer la valeur du token: donn√©es de propri√©t√© manquantes', 'warning');
            }
        }
        
        document.getElementById('tokenValue').textContent = tokenValueEth > 0 ? 
            '‚Ç¨' + tokenValueEth.toFixed(6) : '0 EUR';
        document.getElementById('myBalance').textContent = formatEther(myBalance);
        // Override des donn√©es pour la d√©monstration (masquer les vraies adresses)
        const isDemoMode = window.isDemoMode ? window.isDemoMode() : true;
        
        if (isDemoMode) {
            const demoProperty = window.getDemoProperty ? window.getDemoProperty() : {
                address: "456 Rue de la Tokenisation, 75000 DemoVille, France [FICTIF]",
                type: "Bureau Commercial - Propri√©t√© de D√©monstration"
            };
            
            document.getElementById('propertyAddress').textContent = demoProperty.address;
            document.getElementById('propertyType').textContent = demoProperty.type;
            
            // Notification pour expliquer le masquage
            if (typeof notifications !== 'undefined') {
                const disclaimerMsg = window.RWA_CONFIG?.DISCLAIMER?.notification || 
                    'Les vraies adresses de propri√©t√© sont masqu√©es et remplac√©es par des donn√©es fictives pour cette d√©monstration.';
                notifications.info('Donn√©es masqu√©es', disclaimerMsg, { 
                    duration: window.RWA_CONFIG?.UI?.disclaimerDuration || 6000 
                });
            }
        } else {
            document.getElementById('propertyAddress').textContent = property.propertyAddress;
            document.getElementById('propertyType').textContent = property.propertyType;
        }
        
        document.getElementById('propertyValue').textContent = formatEther(property.totalValue) + ' EUR';
        document.getElementById('tokenizedPercentage').textContent = property.tokenizedPercentage + '%';
        document.getElementById('isVerified').textContent = property.isVerified ? '‚úÖ Oui' : '‚ùå Non';
        document.getElementById('isVerified').className = property.isVerified ? 'font-medium text-green-600' : 'font-medium text-red-600';
        
        // Statut KYC de l'utilisateur et v√©rification des r√¥les
        const [isQualified, owner, propertyManager] = await Promise.all([
            contract.qualifiedInvestors(userAddress),
            contract.owner(),
            contract.propertyManager()
        ]);
        
        const kycElement = document.getElementById('kycStatus');
        if (isQualified) {
            kycElement.textContent = '‚úÖ Qualifi√©';
            kycElement.className = 'px-2 py-1 text-xs rounded bg-green-100 text-green-800';
        } else {
            kycElement.textContent = '‚ùå Non qualifi√©';
            kycElement.className = 'px-2 py-1 text-xs rounded bg-red-100 text-red-800';
        }
        
        // D√©terminer les r√¥les de l'utilisateur
        const isOwner = userAddress.toLowerCase() === owner.toLowerCase();
        const isPropertyManager = userAddress.toLowerCase() === propertyManager.toLowerCase();
        
        // Mettre √† jour la status bar
        if (typeof statusBar !== 'undefined') {
            statusBar.updateKYC(isQualified);
            statusBar.updateRole(isOwner, isPropertyManager);
            statusBar.updatePortfolio(parseFloat(ethers.utils.formatEther(myBalance)), parseFloat(ethers.utils.formatEther(myBalance)) * tokenValueEth);
        }
        
        // Adapter l'interface selon le r√¥le
        if (typeof adaptInterfaceForRole !== 'undefined') {
            adaptInterfaceForRole(isOwner, isPropertyManager, isQualified);
        }
        
        // Revenus et dividendes
        const [totalRevenue, totalDistributed] = await Promise.all([
            contract.totalRevenueCollected(),
            contract.totalRevenueDistributed()
        ]);
        
        const totalRevenueNumber = parseInt(totalRevenue.toString());
        const totalDistributedETH = parseFloat(formatEther(totalDistributed));
        
        document.getElementById('totalRevenue').textContent = totalRevenueNumber.toLocaleString('fr-FR') + ' EUR';
        document.getElementById('totalDistributed').textContent = formatEther(totalDistributed) + ' ETH';
        
        // Calculer les revenus en attente (non encore distribu√©s)
        const pendingRevenueEUR = totalRevenueNumber; // Tous les revenus EUR sont "en attente" jusqu'√† distribution ETH
        
        console.log('üìä DONN√âES REVENUS:');
        console.log('- Total revenus collect√©s (brut):', totalRevenue.toString());
        console.log('- Total revenus collect√©s (nombre):', totalRevenueNumber, 'EUR');
        console.log('- Total distribu√©s (ETH):', totalDistributedETH, 'ETH');
        console.log('- Revenus en attente:', pendingRevenueEUR, 'EUR');
        
        document.getElementById('pendingRevenue').textContent = pendingRevenueEUR.toLocaleString('fr-FR') + ' EUR';
        
        // Calculer la part de l'utilisateur - CORRECTION BUG
        // Utiliser ethers.utils.formatEther au lieu de formatEther local
        const myBalanceNumber = parseFloat(ethers.utils.formatEther(myBalance));
        const totalSupplyNumber = parseFloat(ethers.utils.formatEther(totalSupply));
        const myPercentage = totalSupplyNumber > 0 ? (myBalanceNumber / totalSupplyNumber) * 100 : 0;
        const myRevenueShare = (pendingRevenueEUR * myPercentage) / 100;
        
        console.log('üí∞ CALCUL DES REVENUS:');
        console.log('- Mon balance (brut):', myBalance.toString());
        console.log('- Mon balance (format√©):', myBalanceNumber, 'tokens');
        console.log('- Total supply (brut):', totalSupply.toString());
        console.log('- Total supply (format√©):', totalSupplyNumber, 'tokens');
        console.log('- Mon pourcentage:', myPercentage.toFixed(4) + '%');
        console.log('- Revenus en attente:', pendingRevenueEUR, 'EUR');
        console.log('- Ma part des revenus:', myRevenueShare.toFixed(2), 'EUR');
        
        // V√©rification des valeurs critiques
        if (myBalanceNumber === 0) {
            console.log('‚ö†Ô∏è ALERTE: Balance utilisateur = 0');
        }
        if (totalSupplyNumber === 0) {
            console.log('‚ö†Ô∏è ALERTE: Total supply = 0');
        }
        if (myPercentage === 0 && myBalanceNumber > 0) {
            console.log('‚ö†Ô∏è ALERTE: Pourcentage = 0 mais balance > 0 - Probl√®me de calcul!');
        }
        
        document.getElementById('myTokenPercentage').textContent = myPercentage.toFixed(2) + '%';
        document.getElementById('myRevenueShare').textContent = myRevenueShare.toLocaleString('fr-FR', {
            minimumFractionDigits: 0,
            maximumFractionDigits: 2
        }) + ' EUR';
        
        // Calculer distribution ETH sugg√©r√©e - MONTANT FIXE POUR TESTS
        const fixedTestAmount = 0.01; // Montant fixe pour les tests (compatible avec balance testnet)
        const suggestedETHAmount = fixedTestAmount;
        const myETHShare = (suggestedETHAmount * myPercentage) / 100;
        
        document.getElementById('suggestedETH').textContent = suggestedETHAmount.toFixed(6) + ' ETH';
        document.getElementById('myETHShare').textContent = myETHShare.toFixed(6) + ' ETH';
        
        // Pr√©-remplir le champ de distribution manuelle
        document.getElementById('dividendAmount').value = suggestedETHAmount.toFixed(6);
        
        // Notification de succ√®s avec statistiques
        if (typeof notifications !== 'undefined') {
            notifications.success('Donn√©es synchronis√©es', 
                `Propri√©t√©: ${formatCurrency(parseFloat(ethers.utils.formatEther(property.totalValue)))} ‚Ä¢ Tokens: ${formatTokens(parseFloat(ethers.utils.formatEther(myBalance)))} ‚Ä¢ Revenus: ${formatCurrency(pendingRevenueEUR)}`
            );
        } else {
            showMessage('‚úÖ Donn√©es charg√©es avec succ√®s', 'success');
        }
        
    } catch (error) {
        console.error('Erreur lors du chargement:', error);
        showMessage(`‚ùå Erreur de chargement: ${error.message}`, 'error');
    }
}

// Qualifier un investisseur
async function qualifyInvestor() {
    const address = document.getElementById('qualifyAddress').value;
    if (!address || !ethers.utils.isAddress(address)) {
        showMessage('‚ùå Adresse invalide', 'error');
        return;
    }
    
    try {
        showMessage('‚è≥ Qualification en cours...', 'info');
        const tx = await contract.qualifyInvestor(address);
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Investisseur qualifi√© avec succ√®s!', 'success');
        document.getElementById('qualifyAddress').value = '';
        
        // Recharger les donn√©es si c'est l'utilisateur actuel
        if (address.toLowerCase() === userAddress.toLowerCase()) {
            await loadContractData();
        }
        
    } catch (error) {
        console.error('Erreur qualification:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Transf√©rer des tokens
async function transferTokens() {
    const to = document.getElementById('transferTo').value;
    const amount = document.getElementById('transferAmount').value;
    
    if (!to || !ethers.utils.isAddress(to)) {
        showMessage('‚ùå Adresse destinataire invalide', 'error');
        return;
    }
    
    if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
        showMessage('‚ùå Montant invalide', 'error');
        return;
    }
    
    try {
        showMessage('‚è≥ Transfert en cours...', 'info');
        const tx = await contract.transfer(to, ethers.utils.parseEther(amount));
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Transfert r√©ussi!', 'success');
        
        // Vider les champs
        document.getElementById('transferTo').value = '';
        document.getElementById('transferAmount').value = '';
        
        // Recharger les donn√©es
        await loadContractData();
        
    } catch (error) {
        console.error('Erreur transfert:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Mettre √† jour la valorisation
async function updateValuation() {
    const newValue = document.getElementById('newValuation').value;
    const hash = document.getElementById('valuationHash').value;
    
    if (!newValue || isNaN(newValue) || parseFloat(newValue) <= 0) {
        showMessage('‚ùå Nouvelle valorisation invalide', 'error');
        return;
    }
    
    if (!hash) {
        showMessage('‚ùå Hash du rapport requis', 'error');
        return;
    }
    
    try {
        showMessage('‚è≥ Mise √† jour en cours...', 'info');
        const tx = await contract.updatePropertyValuation(
            ethers.utils.parseEther(newValue),
            hash
        );
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Valorisation mise √† jour!', 'success');
        
        // Vider les champs
        document.getElementById('newValuation').value = '';
        document.getElementById('valuationHash').value = '';
        
        // Recharger les donn√©es
        await loadContractData();
        
    } catch (error) {
        console.error('Erreur mise √† jour:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// V√©rifier la propri√©t√©
async function verifyProperty() {
    const hash = document.getElementById('verificationHash').value;
    
    if (!hash) {
        showMessage('‚ùå Hash des documents requis', 'error');
        return;
    }
    
    try {
        showMessage('‚è≥ V√©rification en cours...', 'info');
        const tx = await contract.verifyProperty(hash);
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Propri√©t√© v√©rifi√©e!', 'success');
        
        document.getElementById('verificationHash').value = '';
        await loadContractData();
        
    } catch (error) {
        console.error('Erreur v√©rification:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}


// Distribuer les dividendes
async function distributeDividends() {
    const amount = document.getElementById('dividendAmount').value;
    
    if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
        showMessage('‚ùå Montant invalide', 'error');
        return;
    }
    
    try {
        showMessage('‚è≥ Distribution en cours...', 'info');
        const tx = await contract.distributeDividends({
            value: ethers.utils.parseEther(amount)
        });
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Dividendes distribu√©s!', 'success');
        
        document.getElementById('dividendAmount').value = '';
        await loadContractData();
        
    } catch (error) {
        console.error('Erreur distribution:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Pauser le contrat
async function pauseContract() {
    try {
        showMessage('‚è≥ Pause en cours...', 'info');
        const tx = await contract.pause();
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Contrat paus√©!', 'success');
        
    } catch (error) {
        console.error('Erreur pause:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Reprendre le contrat
async function unpauseContract() {
    try {
        showMessage('‚è≥ Reprise en cours...', 'info');
        const tx = await contract.unpause();
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Contrat repris!', 'success');
        
    } catch (error) {
        console.error('Erreur reprise:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Utilitaires
function formatEther(value) {
    return parseFloat(ethers.utils.formatEther(value)).toLocaleString('fr-FR', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 2
    });
}

// Fonction pour les calculs num√©riques purs (sans formatage)
function parseEther(value) {
    return parseFloat(ethers.utils.formatEther(value));
}

function showMessage(message, type) {
    const container = document.getElementById('statusMessages');
    const messageDiv = document.createElement('div');
    
    let bgColor, textColor;
    switch(type) {
        case 'success':
            bgColor = 'bg-green-100';
            textColor = 'text-green-800';
            break;
        case 'error':
            bgColor = 'bg-red-100';
            textColor = 'text-red-800';
            break;
        case 'info':
            bgColor = 'bg-blue-100';
            textColor = 'text-blue-800';
            break;
        default:
            bgColor = 'bg-gray-100';
            textColor = 'text-gray-800';
    }
    
    messageDiv.className = `${bgColor} ${textColor} px-4 py-3 rounded mb-2 border`;
    messageDiv.textContent = message;
    
    container.appendChild(messageDiv);
    
    // Auto-remove apr√®s 5 secondes
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.parentNode.removeChild(messageDiv);
        }
    }, 5000);
    
    // Scroll vers le message
    messageDiv.scrollIntoView({ behavior: 'smooth' });
}

// Distribution automatique des dividendes
async function autoDistributeDividends() {
    console.log('üöÄ autoDistributeDividends appel√©e');
    
    if (!contract) {
        console.log('‚ùå Pas de contrat dans autoDistributeDividends');
        showMessage('‚ùå Connectez-vous d\'abord', 'error');
        return;
    }
    
    try {
        console.log('‚úÖ D√©but de la distribution automatique');
        showMessage('üßÆ Calcul de la distribution automatique...', 'info');
        
        // R√©cup√©rer les donn√©es n√©cessaires
        const [totalRevenue, totalDistributed] = await Promise.all([
            contract.totalRevenueCollected(),
            contract.totalRevenueDistributed()
        ]);
        
        const pendingRevenueEUR = parseInt(totalRevenue.toString());
        
        if (pendingRevenueEUR <= 0) {
            showMessage('‚ùå Aucun revenu √† distribuer', 'error');
            return;
        }
        
        // Calculer le montant ETH sugg√©r√© - MONTANT FIXE POUR TESTS
        const fixedTestAmount = 0.01; // Montant fixe pour les tests  
        const suggestedETHAmount = fixedTestAmount;
        
        showMessage(`üí∞ Distribution de ${suggestedETHAmount.toFixed(6)} ETH pour ${pendingRevenueEUR.toLocaleString('fr-FR')} EUR de revenus`, 'info');
        showMessage('‚è≥ Envoi de la transaction...', 'info');
        
        const tx = await contract.distributeDividends({
            value: ethers.utils.parseEther(suggestedETHAmount.toString())
        });
        
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage('‚úÖ Distribution automatique r√©ussie!', 'success');
        
        // Recharger les donn√©es
        await loadContractData();
        
    } catch (error) {
        console.error('Erreur distribution automatique:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Exposer autoDistributeDividends globalement imm√©diatement apr√®s sa d√©finition
window.autoDistributeDividends = autoDistributeDividends;

// Fonction pour adapter l'interface selon le r√¥le utilisateur
function adaptInterfaceForRole(isOwner, isManager, isQualified) {
    console.log('üé≠ Adaptation interface pour r√¥le:', { isOwner, isManager, isQualified });
    
    // √âl√©ments √† masquer/afficher selon le r√¥le
    const ownerActions = document.querySelectorAll('[data-role="owner"]');
    const managerActions = document.querySelectorAll('[data-role="manager"]');
    const investorActions = document.querySelectorAll('[data-role="investor"]');
    
    // Actions propri√©taire
    ownerActions.forEach(element => {
        element.style.display = isOwner ? 'block' : 'none';
    });
    
    // Actions gestionnaire
    managerActions.forEach(element => {
        element.style.display = (isOwner || isManager) ? 'block' : 'none';
    });
    
    // Actions investisseur (transferts n√©cessitent KYC)
    investorActions.forEach(element => {
        if (element.id === 'transferBtn') {
            element.disabled = !isQualified;
            element.title = isQualified ? 'Transf√©rer vos tokens' : 'KYC requis pour les transferts';
        }
    });
    
    // Notifications contextuelles selon le r√¥le
    if (typeof notifications !== 'undefined') {
        if (isOwner) {
            notifications.info('Mode Propri√©taire', 'Vous avez acc√®s √† toutes les fonctions de gestion');
        } else if (isManager) {
            notifications.info('Mode Gestionnaire', 'Vous pouvez collecter des revenus et distribuer des dividendes');
        } else if (!isQualified) {
            notifications.warning('KYC Requis', 'Contactez l\'administrateur pour √™tre qualifi√© en tant qu\'investisseur', {
                duration: 8000
            });
        }
    }
}

// Exposer la fonction globalement
window.adaptInterfaceForRole = adaptInterfaceForRole;

// Basculer l'affichage de la distribution manuelle
function toggleManualDistribution() {
    const manualDiv = document.getElementById('manualDistribution');
    const showBtn = document.getElementById('showManualBtn');
    
    if (manualDiv.classList.contains('hidden')) {
        manualDiv.classList.remove('hidden');
        showBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
        showBtn.title = 'Masquer distribution manuelle';
    } else {
        manualDiv.classList.add('hidden');
        showBtn.innerHTML = '<i class="fas fa-cog"></i>';
        showBtn.title = 'Afficher distribution manuelle';
    }
}

// Calculer manuellement la valeur du token
async function manuallyCalculateTokenValue() {
    console.log('üî• Fonction manuallyCalculateTokenValue appel√©e');
    showMessage('üî• Fonction appel√©e!', 'info');
    
    if (!contract) {
        console.log('‚ùå Contract non disponible');
        showMessage('‚ùå Connectez-vous d\'abord', 'error');
        return;
    }

    console.log('‚úÖ Contract disponible, d√©but du calcul');
    showMessage('‚úÖ Contract trouv√©, calcul en cours...', 'info');

    try {
        showMessage('üßÆ Calcul de la valeur du token...', 'info');
        
        const [property, totalSupply, tokenValue] = await Promise.all([
            contract.getPropertyMetadata(),
            contract.totalSupply(),
            contract.getTokenValue()
        ]);

        const propertyValueEur = parseFloat(ethers.utils.formatEther(property.totalValue));
        const totalSupplyNum = parseFloat(ethers.utils.formatEther(totalSupply));
        const tokenizedPercentage = property.tokenizedPercentage;
        const currentTokenValue = parseFloat(ethers.utils.formatEther(tokenValue));
        
        console.log('üîç DONN√âES POUR CALCUL MANUEL:');
        console.log('- Valeur propri√©t√©:', propertyValueEur, 'EUR');
        console.log('- % tokenis√©:', tokenizedPercentage, '%');
        console.log('- Supply total:', totalSupplyNum, 'tokens');
        console.log('- Valeur actuelle contrat:', currentTokenValue, 'EUR');
        
        if (propertyValueEur > 0 && totalSupplyNum > 0 && tokenizedPercentage > 0) {
            const tokenizedValue = (propertyValueEur * tokenizedPercentage) / 100;
            const calculatedTokenValue = tokenizedValue / totalSupplyNum;
            
            // Mettre √† jour l'affichage
            document.getElementById('tokenValue').textContent = '‚Ç¨' + calculatedTokenValue.toFixed(6);
            
            showMessage(`‚úÖ Valeur calcul√©e: ‚Ç¨${calculatedTokenValue.toFixed(6)} par token`, 'success');
            showMessage(`üè¢ Bas√© sur: Propri√©t√© ‚Ç¨${propertyValueEur.toLocaleString('fr-FR')} (${tokenizedPercentage}% tokenis√©)`, 'info');
            showMessage(`üìä ${totalSupplyNum.toLocaleString('fr-FR')} tokens au total`, 'info');
            
            // Calculer la valeur du portefeuille utilisateur
            const myBalance = await contract.balanceOf(userAddress);
            const balanceNum = parseFloat(ethers.utils.formatEther(myBalance));
            const portfolioValue = balanceNum * calculatedTokenValue;
            showMessage(`üíº Votre portefeuille: ${balanceNum.toLocaleString('fr-FR')} tokens = ‚Ç¨${portfolioValue.toLocaleString('fr-FR')}`, 'success');
            
        } else {
            showMessage('‚ùå Impossible de calculer: donn√©es insuffisantes', 'error');
            if (propertyValueEur <= 0) showMessage('- Valeur de propri√©t√©: ' + propertyValueEur, 'error');
            if (tokenizedPercentage <= 0) showMessage('- % tokenis√©: ' + tokenizedPercentage, 'error');
            if (totalSupplyNum <= 0) showMessage('- Supply total: ' + totalSupplyNum, 'error');
        }

    } catch (error) {
        console.error('Erreur calcul:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Am√©lioration de la fonction collectRevenue pour forcer le recalcul
async function collectRevenue() {
    const amount = document.getElementById('revenueAmount').value;
    
    if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
        showMessage('‚ùå Montant invalide', 'error');
        return;
    }
    
    try {
        showMessage('‚è≥ Collecte en cours...', 'info');
        const tx = await contract.collectRevenue(amount);
        showMessage(`‚è≥ Transaction envoy√©e: ${tx.hash}`, 'info');
        
        await tx.wait();
        showMessage(`‚úÖ ${parseFloat(amount).toLocaleString('fr-FR')} EUR de revenus collect√©s!`, 'success');
        showMessage('üßÆ Calcul automatique de la distribution en cours...', 'info');
        
        document.getElementById('revenueAmount').value = '';
        
        // Recharger et recalculer automatiquement
        await loadContractData();
        
        // Afficher un r√©sum√© de ce qui peut √™tre distribu√©
        setTimeout(() => {
            showMessage('üí° Distribution automatique disponible! Cliquez sur "Distribution Auto"', 'info');
        }, 1000);
        
    } catch (error) {
        console.error('Erreur collecte:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
}

// Rendre les fonctions accessibles globalement d√®s que le script se charge
window.manuallyCalculateTokenValue = async function() {
    console.log('üî• Fonction manuallyCalculateTokenValue appel√©e (globale)');
    showMessage('üî• Fonction appel√©e!', 'info');
    
    if (!contract) {
        console.log('‚ùå Contract non disponible');
        showMessage('‚ùå Connectez-vous d\'abord', 'error');
        return;
    }

    console.log('‚úÖ Contract disponible, d√©but du calcul');
    showMessage('‚úÖ Contract trouv√©, calcul en cours...', 'info');

    try {
        showMessage('üßÆ Calcul de la valeur du token...', 'info');
        
        const [property, totalSupply, tokenValue] = await Promise.all([
            contract.getPropertyMetadata(),
            contract.totalSupply(),
            contract.getTokenValue()
        ]);

        const propertyValueEur = parseFloat(ethers.utils.formatEther(property.totalValue));
        const totalSupplyNum = parseFloat(ethers.utils.formatEther(totalSupply));
        const tokenizedPercentage = property.tokenizedPercentage;
        const currentTokenValue = parseFloat(ethers.utils.formatEther(tokenValue));
        
        console.log('üîç DONN√âES POUR CALCUL MANUEL:');
        console.log('- Valeur propri√©t√©:', propertyValueEur, 'EUR');
        console.log('- % tokenis√©:', tokenizedPercentage, '%');
        console.log('- Supply total:', totalSupplyNum, 'tokens');
        console.log('- Valeur actuelle contrat:', currentTokenValue, 'EUR');
        
        if (propertyValueEur > 0 && totalSupplyNum > 0 && tokenizedPercentage > 0) {
            const tokenizedValue = (propertyValueEur * tokenizedPercentage) / 100;
            const calculatedTokenValue = tokenizedValue / totalSupplyNum;
            
            // Mettre √† jour l'affichage
            document.getElementById('tokenValue').textContent = '‚Ç¨' + calculatedTokenValue.toFixed(6);
            
            showMessage(`‚úÖ Valeur calcul√©e: ‚Ç¨${calculatedTokenValue.toFixed(6)} par token`, 'success');
            showMessage(`üè¢ Bas√© sur: Propri√©t√© ‚Ç¨${propertyValueEur.toLocaleString('fr-FR')} (${tokenizedPercentage}% tokenis√©)`, 'info');
            showMessage(`üìä ${totalSupplyNum.toLocaleString('fr-FR')} tokens au total`, 'info');
            
            // Calculer la valeur du portefeuille utilisateur
            const myBalance = await contract.balanceOf(userAddress);
            const balanceNum = parseFloat(ethers.utils.formatEther(myBalance));
            const portfolioValue = balanceNum * calculatedTokenValue;
            showMessage(`üíº Votre portefeuille: ${balanceNum.toLocaleString('fr-FR')} tokens = ‚Ç¨${portfolioValue.toLocaleString('fr-FR')}`, 'success');
            
        } else {
            showMessage('‚ùå Impossible de calculer: donn√©es insuffisantes', 'error');
            if (propertyValueEur <= 0) showMessage('- Valeur de propri√©t√©: ' + propertyValueEur, 'error');
            if (tokenizedPercentage <= 0) showMessage('- % tokenis√©: ' + tokenizedPercentage, 'error');
            if (totalSupplyNum <= 0) showMessage('- Supply total: ' + totalSupplyNum, 'error');
        }

    } catch (error) {
        console.error('Erreur calcul:', error);
        showMessage(`‚ùå Erreur: ${error.reason || error.message}`, 'error');
    }
};

// Fonction de test globale
window.testCalculateValue = function() {
    console.log('üß™ Test function called');
    showMessage('üß™ Test function called!', 'info');
    window.manuallyCalculateTokenValue();
};

// Fonction simple pour forcer l'ajout de l'event listener
window.attachCalculateButton = function() {
    const btn = document.getElementById('calculateTokenValueBtn');
    if (btn) {
        btn.onclick = window.manuallyCalculateTokenValue;
        console.log('‚úÖ Event listener attach√© manuellement');
        showMessage('‚úÖ Bouton connect√©!', 'success');
    } else {
        console.log('‚ùå Bouton non trouv√©');
    }
};

// √âcouter les changements de compte MetaMask
if (window.ethereum) {
    window.ethereum.on('accountsChanged', async (accounts) => {
        if (accounts.length === 0) {
            // D√©connect√©
            location.reload();
        } else {
            // Compte chang√©
            await connectWallet();
        }
    });
    
    window.ethereum.on('chainChanged', (chainId) => {
        // R√©seau chang√©
        location.reload();
    });
}